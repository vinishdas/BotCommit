import os
import subprocess
from datetime import datetime
import openai

# === CONFIGURATION ===
TARGET_REPO_URL = "https://github.com/vinishdas/miniproject.git"  # Replace with your actual repo
BRANCH = "main"  # or 'master' if your repo uses that
LANGUAGE = "python"  # Change to desired language: 'js', 'java', etc.

# === ENV VARIABLES (from GitHub Secrets) ===
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GH_PAT = os.getenv("GH_PAT")  # GitHub token for pushing
REPO_DIR = "python"

# === OpenAI Setup ===
openai.api_key = OPENAI_API_KEY

def generate_sample_code():
    prompt = f"Write a unique and interesting {LANGUAGE} program with a short explanation in comments."
    
    response = openai.ChatCompletion.create(
        model="gpt-4",  # or gpt-3.5-turbo
        messages=[{"role": "user", "content": prompt}],
        temperature=0.8
    )
    
    return response.choices[0].message.content

def clone_target_repo():
    if os.path.exists(REPO_DIR):
        subprocess.run(["rm", "-rf", REPO_DIR])
    auth_url = TARGET_REPO_URL.replace("https://", f"https://x-access-token:{GH_PAT}@")
    subprocess.run(["git", "clone", auth_url, REPO_DIR])

def write_code_to_file(code: str):
    now = datetime.now().strftime("%Y%m%d_%H%M%S")
    extension = {
        "python": "py",
        "javascript": "js",
        "java": "java",
        "c": "c",
        "cpp": "cpp"
    }.get(LANGUAGE, LANGUAGE)

    filename = f"sample_{now}.{extension}"
    filepath = os.path.join(REPO_DIR, filename)
    
    with open(filepath, "w") as f:
        f.write(code)
    
    return filename

def commit_and_push(filename):
    os.chdir(REPO_DIR)
    
    subprocess.run(["git", "config", "--global", "user.email", "bot@example.com"])
    subprocess.run(["git", "config", "--global", "user.name", "AutoCodeBot"])

    subprocess.run(["git", "add", filename])
    subprocess.run(["git", "commit", "-m", f"Add {filename} generated by bot"])
    subprocess.run(["git", "push", "origin", BRANCH])
    
    os.chdir("..")  # Go back

def main():
    print("Cloning repo...")
    clone_target_repo()

    print("Generating code...")
    code = generate_sample_code()

    print("Saving file...")
    filename = write_code_to_file(code)

    print("Committing and pushing...")
    commit_and_push(filename)

    print("âœ… Done!")

if __name__ == "__main__":
    main()
